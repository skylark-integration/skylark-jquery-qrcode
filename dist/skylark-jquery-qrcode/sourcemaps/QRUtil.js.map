{"version":3,"sources":["QRUtil.js"],"names":["define","QRMaskPattern","QRMath","QRMode","QRPolynomial","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHTypeInfo","data","d","getBCHDigit","getBCHTypeNumber","digit","getPatternPosition","typeNumber","getMask","maskPattern","i","j","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","Math","floor","PATTERN101","PATTERN110","PATTERN111","Error","getErrorCorrectPolynomial","errorCorrectLength","a","multiply","gexp","getLengthInBits","mode","type","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","getLostPoint","qrCode","moduleCount","getModuleCount","lostPoint","row","col","sameCount","dark","isDark","r","c","count","darkCount","abs"],"mappings":"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","file":"../QRUtil.js","sourcesContent":["define([\r\n\t\"./QRMaskPattern\",\r\n\t\"./QRMath\",\r\n\t\"./QRMode\",\r\n\t\"./QRPolynomial\"\r\n],function(QRMaskPattern,QRMath,QRMode,QRPolynomial){\r\n\t//---------------------------------------------------------------------\r\n\t// QRUtil\r\n\t//---------------------------------------------------------------------\r\n\t \r\n\tvar QRUtil = {\r\n\r\n\t    PATTERN_POSITION_TABLE : [\r\n\t\t    [],\r\n\t\t    [6, 18],\r\n\t\t    [6, 22],\r\n\t\t    [6, 26],\r\n\t\t    [6, 30],\r\n\t\t    [6, 34],\r\n\t\t    [6, 22, 38],\r\n\t\t    [6, 24, 42],\r\n\t\t    [6, 26, 46],\r\n\t\t    [6, 28, 50],\r\n\t\t    [6, 30, 54],\t\t\r\n\t\t    [6, 32, 58],\r\n\t\t    [6, 34, 62],\r\n\t\t    [6, 26, 46, 66],\r\n\t\t    [6, 26, 48, 70],\r\n\t\t    [6, 26, 50, 74],\r\n\t\t    [6, 30, 54, 78],\r\n\t\t    [6, 30, 56, 82],\r\n\t\t    [6, 30, 58, 86],\r\n\t\t    [6, 34, 62, 90],\r\n\t\t    [6, 28, 50, 72, 94],\r\n\t\t    [6, 26, 50, 74, 98],\r\n\t\t    [6, 30, 54, 78, 102],\r\n\t\t    [6, 28, 54, 80, 106],\r\n\t\t    [6, 32, 58, 84, 110],\r\n\t\t    [6, 30, 58, 86, 114],\r\n\t\t    [6, 34, 62, 90, 118],\r\n\t\t    [6, 26, 50, 74, 98, 122],\r\n\t\t    [6, 30, 54, 78, 102, 126],\r\n\t\t    [6, 26, 52, 78, 104, 130],\r\n\t\t    [6, 30, 56, 82, 108, 134],\r\n\t\t    [6, 34, 60, 86, 112, 138],\r\n\t\t    [6, 30, 58, 86, 114, 142],\r\n\t\t    [6, 34, 62, 90, 118, 146],\r\n\t\t    [6, 30, 54, 78, 102, 126, 150],\r\n\t\t    [6, 24, 50, 76, 102, 128, 154],\r\n\t\t    [6, 28, 54, 80, 106, 132, 158],\r\n\t\t    [6, 32, 58, 84, 110, 136, 162],\r\n\t\t    [6, 26, 54, 82, 110, 138, 166],\r\n\t\t    [6, 30, 58, 86, 114, 142, 170]\r\n\t    ],\r\n\r\n\t    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),\r\n\t    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),\r\n\t    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)\t| (1 << 4) | (1 << 1),\r\n\r\n\t    getBCHTypeInfo : function(data) {\r\n\t\t    var d = data << 10;\r\n\t\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\r\n\t\t\t    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); \t\r\n\t\t    }\r\n\t\t    return ( (data << 10) | d) ^ QRUtil.G15_MASK;\r\n\t    },\r\n\r\n\t    getBCHTypeNumber : function(data) {\r\n\t\t    var d = data << 12;\r\n\t\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\r\n\t\t\t    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); \t\r\n\t\t    }\r\n\t\t    return (data << 12) | d;\r\n\t    },\r\n\r\n\t    getBCHDigit : function(data) {\r\n\r\n\t\t    var digit = 0;\r\n\r\n\t\t    while (data != 0) {\r\n\t\t\t    digit++;\r\n\t\t\t    data >>>= 1;\r\n\t\t    }\r\n\r\n\t\t    return digit;\r\n\t    },\r\n\r\n\t    getPatternPosition : function(typeNumber) {\r\n\t\t    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\r\n\t    },\r\n\r\n\t    getMask : function(maskPattern, i, j) {\r\n\t\t    \r\n\t\t    switch (maskPattern) {\r\n\t\t\t    \r\n\t\t    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;\r\n\t\t    case QRMaskPattern.PATTERN001 : return i % 2 == 0;\r\n\t\t    case QRMaskPattern.PATTERN010 : return j % 3 == 0;\r\n\t\t    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;\r\n\t\t    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;\r\n\t\t    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;\r\n\t\t    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;\r\n\t\t    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;\r\n\r\n\t\t    default :\r\n\t\t\t    throw new Error(\"bad maskPattern:\" + maskPattern);\r\n\t\t    }\r\n\t    },\r\n\r\n\t    getErrorCorrectPolynomial : function(errorCorrectLength) {\r\n\r\n\t\t    var a = new QRPolynomial([1], 0);\r\n\r\n\t\t    for (var i = 0; i < errorCorrectLength; i++) {\r\n\t\t\t    a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0) );\r\n\t\t    }\r\n\r\n\t\t    return a;\r\n\t    },\r\n\r\n\t    getLengthInBits : function(mode, type) {\r\n\r\n\t\t    if (1 <= type && type < 10) {\r\n\r\n\t\t\t    // 1 - 9\r\n\r\n\t\t\t    switch(mode) {\r\n\t\t\t    case QRMode.MODE_NUMBER \t: return 10;\r\n\t\t\t    case QRMode.MODE_ALPHA_NUM \t: return 9;\r\n\t\t\t    case QRMode.MODE_8BIT_BYTE\t: return 8;\r\n\t\t\t    case QRMode.MODE_KANJI  \t: return 8;\r\n\t\t\t    default :\r\n\t\t\t\t    throw new Error(\"mode:\" + mode);\r\n\t\t\t    }\r\n\r\n\t\t    } else if (type < 27) {\r\n\r\n\t\t\t    // 10 - 26\r\n\r\n\t\t\t    switch(mode) {\r\n\t\t\t    case QRMode.MODE_NUMBER \t: return 12;\r\n\t\t\t    case QRMode.MODE_ALPHA_NUM \t: return 11;\r\n\t\t\t    case QRMode.MODE_8BIT_BYTE\t: return 16;\r\n\t\t\t    case QRMode.MODE_KANJI  \t: return 10;\r\n\t\t\t    default :\r\n\t\t\t\t    throw new Error(\"mode:\" + mode);\r\n\t\t\t    }\r\n\r\n\t\t    } else if (type < 41) {\r\n\r\n\t\t\t    // 27 - 40\r\n\r\n\t\t\t    switch(mode) {\r\n\t\t\t    case QRMode.MODE_NUMBER \t: return 14;\r\n\t\t\t    case QRMode.MODE_ALPHA_NUM\t: return 13;\r\n\t\t\t    case QRMode.MODE_8BIT_BYTE\t: return 16;\r\n\t\t\t    case QRMode.MODE_KANJI  \t: return 12;\r\n\t\t\t    default :\r\n\t\t\t\t    throw new Error(\"mode:\" + mode);\r\n\t\t\t    }\r\n\r\n\t\t    } else {\r\n\t\t\t    throw new Error(\"type:\" + type);\r\n\t\t    }\r\n\t    },\r\n\r\n\t    getLostPoint : function(qrCode) {\r\n\t\t    \r\n\t\t    var moduleCount = qrCode.getModuleCount();\r\n\t\t    \r\n\t\t    var lostPoint = 0;\r\n\t\t    \r\n\t\t    // LEVEL1\r\n\t\t    \r\n\t\t    for (var row = 0; row < moduleCount; row++) {\r\n\r\n\t\t\t    for (var col = 0; col < moduleCount; col++) {\r\n\r\n\t\t\t\t    var sameCount = 0;\r\n\t\t\t\t    var dark = qrCode.isDark(row, col);\r\n\r\n\t\t\t\t\tfor (var r = -1; r <= 1; r++) {\r\n\r\n\t\t\t\t\t    if (row + r < 0 || moduleCount <= row + r) {\r\n\t\t\t\t\t\t    continue;\r\n\t\t\t\t\t    }\r\n\r\n\t\t\t\t\t    for (var c = -1; c <= 1; c++) {\r\n\r\n\t\t\t\t\t\t    if (col + c < 0 || moduleCount <= col + c) {\r\n\t\t\t\t\t\t\t    continue;\r\n\t\t\t\t\t\t    }\r\n\r\n\t\t\t\t\t\t    if (r == 0 && c == 0) {\r\n\t\t\t\t\t\t\t    continue;\r\n\t\t\t\t\t\t    }\r\n\r\n\t\t\t\t\t\t    if (dark == qrCode.isDark(row + r, col + c) ) {\r\n\t\t\t\t\t\t\t    sameCount++;\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t    }\r\n\t\t\t\t    }\r\n\r\n\t\t\t\t    if (sameCount > 5) {\r\n\t\t\t\t\t    lostPoint += (3 + sameCount - 5);\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    }\r\n\r\n\t\t    // LEVEL2\r\n\r\n\t\t    for (var row = 0; row < moduleCount - 1; row++) {\r\n\t\t\t    for (var col = 0; col < moduleCount - 1; col++) {\r\n\t\t\t\t    var count = 0;\r\n\t\t\t\t    if (qrCode.isDark(row,     col    ) ) count++;\r\n\t\t\t\t    if (qrCode.isDark(row + 1, col    ) ) count++;\r\n\t\t\t\t    if (qrCode.isDark(row,     col + 1) ) count++;\r\n\t\t\t\t    if (qrCode.isDark(row + 1, col + 1) ) count++;\r\n\t\t\t\t    if (count == 0 || count == 4) {\r\n\t\t\t\t\t    lostPoint += 3;\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    }\r\n\r\n\t\t    // LEVEL3\r\n\r\n\t\t    for (var row = 0; row < moduleCount; row++) {\r\n\t\t\t    for (var col = 0; col < moduleCount - 6; col++) {\r\n\t\t\t\t    if (qrCode.isDark(row, col)\r\n\t\t\t\t\t\t    && !qrCode.isDark(row, col + 1)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row, col + 2)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row, col + 3)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row, col + 4)\r\n\t\t\t\t\t\t    && !qrCode.isDark(row, col + 5)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row, col + 6) ) {\r\n\t\t\t\t\t    lostPoint += 40;\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    }\r\n\r\n\t\t    for (var col = 0; col < moduleCount; col++) {\r\n\t\t\t    for (var row = 0; row < moduleCount - 6; row++) {\r\n\t\t\t\t    if (qrCode.isDark(row, col)\r\n\t\t\t\t\t\t    && !qrCode.isDark(row + 1, col)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row + 2, col)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row + 3, col)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row + 4, col)\r\n\t\t\t\t\t\t    && !qrCode.isDark(row + 5, col)\r\n\t\t\t\t\t\t    &&  qrCode.isDark(row + 6, col) ) {\r\n\t\t\t\t\t    lostPoint += 40;\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    }\r\n\r\n\t\t    // LEVEL4\r\n\t\t    \r\n\t\t    var darkCount = 0;\r\n\r\n\t\t    for (var col = 0; col < moduleCount; col++) {\r\n\t\t\t    for (var row = 0; row < moduleCount; row++) {\r\n\t\t\t\t    if (qrCode.isDark(row, col) ) {\r\n\t\t\t\t\t    darkCount++;\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    }\r\n\t\t    \r\n\t\t    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\r\n\t\t    lostPoint += ratio * 10;\r\n\r\n\t\t    return lostPoint;\t\t\r\n\t    }\r\n\r\n\t};\r\n\r\n\treturn QRUtil;\r\n\r\n});"]}