{"version":3,"sources":["jquery.qrcode.js"],"names":["define","$","QRCode","QRErrorCorrectLevel","fn","qrcode","options","text","extend","render","width","height","typeNumber","correctLevel","H","background","foreground","this","each","element","addData","make","canvas","document","createElement","ctx","getContext","tileW","getModuleCount","tileH","row","col","fillStyle","isDark","w","Math","ceil","floor","h","fillRect","round","createCanvas","$table","css","$row","appendTo","createTable"],"mappings":";;;;;;;AAAAA,QACC,iBACA,WACA,yBACC,SAASC,EAAEC,EAAOC,GAyFnB,OAxFAF,EAAEG,GAAGC,OAAS,SAASC,GAEC,iBAAZA,IACVA,GAAYC,KAAMD,IAKnBA,EAAUL,EAAEO,WACXC,OAAU,SACVC,MAAS,IACTC,OAAU,IACVC,YAAc,EACdC,aAAeV,EAAoBW,EACdC,WAAkB,UAClBC,WAAkB,WACrCV,GAkEH,OAAOW,KAAKC,KAAK,WAChB,IAAIC,EAA4B,UAAlBb,EAAQG,OAjEJ,WAElB,IAAIJ,EAAS,IAAIH,EAAOI,EAAQM,WAAYN,EAAQO,cACpDR,EAAOe,QAAQd,EAAQC,MACvBF,EAAOgB,OAGP,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOZ,MAAQJ,EAAQI,MACvBY,EAAOX,OAASL,EAAQK,OAQxB,IAPA,IAAIc,EAAOH,EAAOI,WAAW,MAGzBC,EAAQrB,EAAQI,MAASL,EAAOuB,iBAChCC,EAAQvB,EAAQK,OAASN,EAAOuB,iBAG3BE,EAAM,EAAGA,EAAMzB,EAAOuB,iBAAkBE,IAChD,IAAK,IAAIC,EAAM,EAAGA,EAAM1B,EAAOuB,iBAAkBG,IAAO,CACvDN,EAAIO,UAAY3B,EAAO4B,OAAOH,EAAKC,GAAOzB,EAAQU,WAAaV,EAAQS,WACvE,IAAImB,EAAKC,KAAKC,MAAML,EAAI,GAAGJ,GAASQ,KAAKE,MAAMN,EAAIJ,GAC/CW,EAAKH,KAAKC,MAAMN,EAAI,GAAGD,GAASM,KAAKE,MAAMP,EAAID,GACnDJ,EAAIc,SAASJ,KAAKK,MAAMT,EAAIJ,GAAOQ,KAAKK,MAAMV,EAAID,GAAQK,EAAGI,GAI/D,OAAOhB,EAuCoCmB,GAnC1B,WAEjB,IAAIpC,EAAS,IAAIH,EAAOI,EAAQM,WAAYN,EAAQO,cACpDR,EAAOe,QAAQd,EAAQC,MACvBF,EAAOgB,OAeP,IAZA,IAAIqB,EAASzC,EAAE,mBACb0C,IAAI,QAASrC,EAAQI,MAAM,MAC3BiC,IAAI,SAAUrC,EAAQK,OAAO,MAC7BgC,IAAI,SAAU,OACdA,IAAI,kBAAmB,YACvBA,IAAI,mBAAoBrC,EAAQS,YAG9BY,EAAQrB,EAAQI,MAAQL,EAAOuB,iBAC/BC,EAAQvB,EAAQK,OAASN,EAAOuB,iBAG5BE,EAAM,EAAGA,EAAMzB,EAAOuB,iBAAkBE,IAG/C,IAFA,IAAIc,EAAO3C,EAAE,aAAa0C,IAAI,SAAUd,EAAM,MAAMgB,SAASH,GAErDX,EAAM,EAAGA,EAAM1B,EAAOuB,iBAAkBG,IAC/C9B,EAAE,aACA0C,IAAI,QAAShB,EAAM,MACnBgB,IAAI,mBAAoBtC,EAAO4B,OAAOH,EAAKC,GAAOzB,EAAQU,WAAaV,EAAQS,YAC/E8B,SAASD,GAIb,OAAOF,EAKqDI,GAC5D7C,EAAEkB,GAAS0B,SAAS5B,SAIfhB","file":"../jquery.qrcode.js","sourcesContent":["define([\n\t\"skylark-jquery\",\n\t\"./QRCode\",\n\t\"./QRErrorCorrectLevel\"\n],function($,QRCode,QRErrorCorrectLevel) {\n\t$.fn.qrcode = function(options) {\n\t\t// if options is string, \n\t\tif( typeof options === 'string' ){\n\t\t\toptions\t= { text: options };\n\t\t}\n\n\t\t// set default values\n\t\t// typeNumber < 1 for automatic calculation\n\t\toptions\t= $.extend( {}, {\n\t\t\trender\t\t: \"canvas\",\n\t\t\twidth\t\t: 256,\n\t\t\theight\t\t: 256,\n\t\t\ttypeNumber\t: -1,\n\t\t\tcorrectLevel\t: QRErrorCorrectLevel.H,\n                        background      : \"#ffffff\",\n                        foreground      : \"#000000\"\n\t\t}, options);\n\n\t\tvar createCanvas\t= function(){\n\t\t\t// create the qrcode itself\n\t\t\tvar qrcode\t= new QRCode(options.typeNumber, options.correctLevel);\n\t\t\tqrcode.addData(options.text);\n\t\t\tqrcode.make();\n\n\t\t\t// create canvas element\n\t\t\tvar canvas\t= document.createElement('canvas');\n\t\t\tcanvas.width\t= options.width;\n\t\t\tcanvas.height\t= options.height;\n\t\t\tvar ctx\t\t= canvas.getContext('2d');\n\n\t\t\t// compute tileW/tileH based on options.width/options.height\n\t\t\tvar tileW\t= options.width  / qrcode.getModuleCount();\n\t\t\tvar tileH\t= options.height / qrcode.getModuleCount();\n\n\t\t\t// draw in the canvas\n\t\t\tfor( var row = 0; row < qrcode.getModuleCount(); row++ ){\n\t\t\t\tfor( var col = 0; col < qrcode.getModuleCount(); col++ ){\n\t\t\t\t\tctx.fillStyle = qrcode.isDark(row, col) ? options.foreground : options.background;\n\t\t\t\t\tvar w = (Math.ceil((col+1)*tileW) - Math.floor(col*tileW));\n\t\t\t\t\tvar h = (Math.ceil((row+1)*tileH) - Math.floor(row*tileH));\n\t\t\t\t\tctx.fillRect(Math.round(col*tileW),Math.round(row*tileH), w, h);  \n\t\t\t\t}\t\n\t\t\t}\n\t\t\t// return just built canvas\n\t\t\treturn canvas;\n\t\t}\n\n\t\t// from Jon-Carlos Rivera (https://github.com/imbcmdth)\n\t\tvar createTable\t= function(){\n\t\t\t// create the qrcode itself\n\t\t\tvar qrcode\t= new QRCode(options.typeNumber, options.correctLevel);\n\t\t\tqrcode.addData(options.text);\n\t\t\tqrcode.make();\n\t\t\t\n\t\t\t// create table element\n\t\t\tvar $table\t= $('<table></table>')\n\t\t\t\t.css(\"width\", options.width+\"px\")\n\t\t\t\t.css(\"height\", options.height+\"px\")\n\t\t\t\t.css(\"border\", \"0px\")\n\t\t\t\t.css(\"border-collapse\", \"collapse\")\n\t\t\t\t.css('background-color', options.background);\n\t\t  \n\t\t\t// compute tileS percentage\n\t\t\tvar tileW\t= options.width / qrcode.getModuleCount();\n\t\t\tvar tileH\t= options.height / qrcode.getModuleCount();\n\n\t\t\t// draw in the table\n\t\t\tfor(var row = 0; row < qrcode.getModuleCount(); row++ ){\n\t\t\t\tvar $row = $('<tr></tr>').css('height', tileH+\"px\").appendTo($table);\n\t\t\t\t\n\t\t\t\tfor(var col = 0; col < qrcode.getModuleCount(); col++ ){\n\t\t\t\t\t$('<td></td>')\n\t\t\t\t\t\t.css('width', tileW+\"px\")\n\t\t\t\t\t\t.css('background-color', qrcode.isDark(row, col) ? options.foreground : options.background)\n\t\t\t\t\t\t.appendTo($row);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t// return just built canvas\n\t\t\treturn $table;\n\t\t}\n  \n\n\t\treturn this.each(function(){\n\t\t\tvar element\t= options.render == \"canvas\" ? createCanvas() : createTable();\n\t\t\t$(element).appendTo(this);\n\t\t});\n\t};\n\n\treturn $;\n});\n"]}