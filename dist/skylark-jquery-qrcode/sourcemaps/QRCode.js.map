{"version":3,"sources":["QRCode.js"],"names":["define","QR8bitByte","QRBitBuffer","QRPolynomial","QRRSBlock","QRUtil","QRCode","typeNumber","errorCorrectLevel","this","modules","moduleCount","dataCache","dataList","Array","prototype","addData","data","newData","push","isDark","row","col","Error","getModuleCount","make","rsBlocks","getRSBlocks","buffer","totalDataCount","i","length","dataCount","put","mode","getLength","getLengthInBits","write","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","minLostPoint","pattern","lostPoint","getLostPoint","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","y","x","beginFill","moveTo","lineTo","endFill","pos","getPatternPosition","j","bits","getBCHTypeNumber","mod","Math","floor","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","PAD0","PAD1","putBit","createBytes","offset","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","totalCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","modIndex","get","totalCodeCount","index"],"mappings":"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","file":"../QRCode.js","sourcesContent":["define([\r\n\t\"./QR8bitByte\",\r\n\t\"./QRBitBuffer\",\r\n\t\"./QRPolynomial\",\r\n\t\"./QRRSBlock\",\r\n\t\"./QRUtil\"\r\n],function(QR8bitByte,QRBitBuffer,QRPolynomial,QRRSBlock,QRUtil){\r\n\r\n\t//---------------------------------------------------------------------\r\n\t// QRCode\r\n\t//---------------------------------------------------------------------\r\n\r\n\tfunction QRCode(typeNumber, errorCorrectLevel) {\r\n\t\tthis.typeNumber = typeNumber;\r\n\t\tthis.errorCorrectLevel = errorCorrectLevel;\r\n\t\tthis.modules = null;\r\n\t\tthis.moduleCount = 0;\r\n\t\tthis.dataCache = null;\r\n\t\tthis.dataList = new Array();\r\n\t}\r\n\r\n\tQRCode.prototype = {\r\n\t\t\r\n\t\taddData : function(data) {\r\n\t\t\tvar newData = new QR8bitByte(data);\r\n\t\t\tthis.dataList.push(newData);\r\n\t\t\tthis.dataCache = null;\r\n\t\t},\r\n\t\t\r\n\t\tisDark : function(row, col) {\r\n\t\t\tif (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\r\n\t\t\t\tthrow new Error(row + \",\" + col);\r\n\t\t\t}\r\n\t\t\treturn this.modules[row][col];\r\n\t\t},\r\n\r\n\t\tgetModuleCount : function() {\r\n\t\t\treturn this.moduleCount;\r\n\t\t},\r\n\t\t\r\n\t\tmake : function() {\r\n\t\t\t// Calculate automatically typeNumber if provided is < 1\r\n\t\t\tif (this.typeNumber < 1 ){\r\n\t\t\t\tvar typeNumber = 1;\r\n\t\t\t\tfor (typeNumber = 1; typeNumber < 40; typeNumber++) {\r\n\t\t\t\t\tvar rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\r\n\r\n\t\t\t\t\tvar buffer = new QRBitBuffer();\r\n\t\t\t\t\tvar totalDataCount = 0;\r\n\t\t\t\t\tfor (var i = 0; i < rsBlocks.length; i++) {\r\n\t\t\t\t\t\ttotalDataCount += rsBlocks[i].dataCount;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (var i = 0; i < this.dataList.length; i++) {\r\n\t\t\t\t\t\tvar data = this.dataList[i];\r\n\t\t\t\t\t\tbuffer.put(data.mode, 4);\r\n\t\t\t\t\t\tbuffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );\r\n\t\t\t\t\t\tdata.write(buffer);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (buffer.getLengthInBits() <= totalDataCount * 8)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis.typeNumber = typeNumber;\r\n\t\t\t}\r\n\t\t\tthis.makeImpl(false, this.getBestMaskPattern() );\r\n\t\t},\r\n\t\t\r\n\t\tmakeImpl : function(test, maskPattern) {\r\n\t\t\t\r\n\t\t\tthis.moduleCount = this.typeNumber * 4 + 17;\r\n\t\t\tthis.modules = new Array(this.moduleCount);\r\n\t\t\t\r\n\t\t\tfor (var row = 0; row < this.moduleCount; row++) {\r\n\t\t\t\t\r\n\t\t\t\tthis.modules[row] = new Array(this.moduleCount);\r\n\t\t\t\t\r\n\t\t\t\tfor (var col = 0; col < this.moduleCount; col++) {\r\n\t\t\t\t\tthis.modules[row][col] = null;//(col + row) % 3;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tthis.setupPositionProbePattern(0, 0);\r\n\t\t\tthis.setupPositionProbePattern(this.moduleCount - 7, 0);\r\n\t\t\tthis.setupPositionProbePattern(0, this.moduleCount - 7);\r\n\t\t\tthis.setupPositionAdjustPattern();\r\n\t\t\tthis.setupTimingPattern();\r\n\t\t\tthis.setupTypeInfo(test, maskPattern);\r\n\t\t\t\r\n\t\t\tif (this.typeNumber >= 7) {\r\n\t\t\t\tthis.setupTypeNumber(test);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (this.dataCache == null) {\r\n\t\t\t\tthis.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tthis.mapData(this.dataCache, maskPattern);\r\n\t\t},\r\n\r\n\t\tsetupPositionProbePattern : function(row, col)  {\r\n\t\t\t\r\n\t\t\tfor (var r = -1; r <= 7; r++) {\r\n\t\t\t\t\r\n\t\t\t\tif (row + r <= -1 || this.moduleCount <= row + r) continue;\r\n\t\t\t\t\r\n\t\t\t\tfor (var c = -1; c <= 7; c++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (col + c <= -1 || this.moduleCount <= col + c) continue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\r\n\t\t\t\t\t\t\t|| (0 <= c && c <= 6 && (r == 0 || r == 6) )\r\n\t\t\t\t\t\t\t|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\r\n\t\t\t\t\t\tthis.modules[row + r][col + c] = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.modules[row + r][col + c] = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\t\t\r\n\t\t},\r\n\t\t\r\n\t\tgetBestMaskPattern : function() {\r\n\t\t\r\n\t\t\tvar minLostPoint = 0;\r\n\t\t\tvar pattern = 0;\r\n\t\t\r\n\t\t\tfor (var i = 0; i < 8; i++) {\r\n\t\t\t\t\r\n\t\t\t\tthis.makeImpl(true, i);\r\n\t\t\r\n\t\t\t\tvar lostPoint = QRUtil.getLostPoint(this);\r\n\t\t\r\n\t\t\t\tif (i == 0 || minLostPoint >  lostPoint) {\r\n\t\t\t\t\tminLostPoint = lostPoint;\r\n\t\t\t\t\tpattern = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn pattern;\r\n\t\t},\r\n\t\t\r\n\t\tcreateMovieClip : function(target_mc, instance_name, depth) {\r\n\t\t\r\n\t\t\tvar qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\r\n\t\t\tvar cs = 1;\r\n\t\t\r\n\t\t\tthis.make();\r\n\r\n\t\t\tfor (var row = 0; row < this.modules.length; row++) {\r\n\t\t\t\t\r\n\t\t\t\tvar y = row * cs;\r\n\t\t\t\t\r\n\t\t\t\tfor (var col = 0; col < this.modules[row].length; col++) {\r\n\t\t\r\n\t\t\t\t\tvar x = col * cs;\r\n\t\t\t\t\tvar dark = this.modules[row][col];\r\n\t\t\t\t\r\n\t\t\t\t\tif (dark) {\r\n\t\t\t\t\t\tqr_mc.beginFill(0, 100);\r\n\t\t\t\t\t\tqr_mc.moveTo(x, y);\r\n\t\t\t\t\t\tqr_mc.lineTo(x + cs, y);\r\n\t\t\t\t\t\tqr_mc.lineTo(x + cs, y + cs);\r\n\t\t\t\t\t\tqr_mc.lineTo(x, y + cs);\r\n\t\t\t\t\t\tqr_mc.endFill();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn qr_mc;\r\n\t\t},\r\n\r\n\t\tsetupTimingPattern : function() {\r\n\t\t\t\r\n\t\t\tfor (var r = 8; r < this.moduleCount - 8; r++) {\r\n\t\t\t\tif (this.modules[r][6] != null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tthis.modules[r][6] = (r % 2 == 0);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfor (var c = 8; c < this.moduleCount - 8; c++) {\r\n\t\t\t\tif (this.modules[6][c] != null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tthis.modules[6][c] = (c % 2 == 0);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tsetupPositionAdjustPattern : function() {\r\n\t\t\r\n\t\t\tvar pos = QRUtil.getPatternPosition(this.typeNumber);\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < pos.length; i++) {\r\n\t\t\t\r\n\t\t\t\tfor (var j = 0; j < pos.length; j++) {\r\n\t\t\t\t\r\n\t\t\t\t\tvar row = pos[i];\r\n\t\t\t\t\tvar col = pos[j];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.modules[row][col] != null) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (var r = -2; r <= 2; r++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var c = -2; c <= 2; c++) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (r == -2 || r == 2 || c == -2 || c == 2 \r\n\t\t\t\t\t\t\t\t\t|| (r == 0 && c == 0) ) {\r\n\t\t\t\t\t\t\t\tthis.modules[row + r][col + c] = true;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.modules[row + r][col + c] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tsetupTypeNumber : function(test) {\r\n\t\t\r\n\t\t\tvar bits = QRUtil.getBCHTypeNumber(this.typeNumber);\r\n\t\t\r\n\t\t\tfor (var i = 0; i < 18; i++) {\r\n\t\t\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\r\n\t\t\t\tthis.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfor (var i = 0; i < 18; i++) {\r\n\t\t\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\r\n\t\t\t\tthis.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tsetupTypeInfo : function(test, maskPattern) {\r\n\t\t\r\n\t\t\tvar data = (this.errorCorrectLevel << 3) | maskPattern;\r\n\t\t\tvar bits = QRUtil.getBCHTypeInfo(data);\r\n\t\t\r\n\t\t\t// vertical\t\t\r\n\t\t\tfor (var i = 0; i < 15; i++) {\r\n\t\t\r\n\t\t\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\r\n\t\t\r\n\t\t\t\tif (i < 6) {\r\n\t\t\t\t\tthis.modules[i][8] = mod;\r\n\t\t\t\t} else if (i < 8) {\r\n\t\t\t\t\tthis.modules[i + 1][8] = mod;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.modules[this.moduleCount - 15 + i][8] = mod;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// horizontal\r\n\t\t\tfor (var i = 0; i < 15; i++) {\r\n\t\t\r\n\t\t\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\r\n\t\t\t\t\r\n\t\t\t\tif (i < 8) {\r\n\t\t\t\t\tthis.modules[8][this.moduleCount - i - 1] = mod;\r\n\t\t\t\t} else if (i < 9) {\r\n\t\t\t\t\tthis.modules[8][15 - i - 1 + 1] = mod;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.modules[8][15 - i - 1] = mod;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// fixed module\r\n\t\t\tthis.modules[this.moduleCount - 8][8] = (!test);\r\n\t\t\r\n\t\t},\r\n\t\t\r\n\t\tmapData : function(data, maskPattern) {\r\n\t\t\t\r\n\t\t\tvar inc = -1;\r\n\t\t\tvar row = this.moduleCount - 1;\r\n\t\t\tvar bitIndex = 7;\r\n\t\t\tvar byteIndex = 0;\r\n\t\t\t\r\n\t\t\tfor (var col = this.moduleCount - 1; col > 0; col -= 2) {\r\n\t\t\r\n\t\t\t\tif (col == 6) col--;\r\n\t\t\r\n\t\t\t\twhile (true) {\r\n\t\t\r\n\t\t\t\t\tfor (var c = 0; c < 2; c++) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (this.modules[row][col - c] == null) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar dark = false;\r\n\t\t\r\n\t\t\t\t\t\t\tif (byteIndex < data.length) {\r\n\t\t\t\t\t\t\t\tdark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\tvar mask = QRUtil.getMask(maskPattern, row, col - c);\r\n\t\t\r\n\t\t\t\t\t\t\tif (mask) {\r\n\t\t\t\t\t\t\t\tdark = !dark;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.modules[row][col - c] = dark;\r\n\t\t\t\t\t\t\tbitIndex--;\r\n\t\t\r\n\t\t\t\t\t\t\tif (bitIndex == -1) {\r\n\t\t\t\t\t\t\t\tbyteIndex++;\r\n\t\t\t\t\t\t\t\tbitIndex = 7;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\trow += inc;\r\n\t\t\r\n\t\t\t\t\tif (row < 0 || this.moduleCount <= row) {\r\n\t\t\t\t\t\trow -= inc;\r\n\t\t\t\t\t\tinc = -inc;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tQRCode.PAD0 = 0xEC;\r\n\tQRCode.PAD1 = 0x11;\r\n\r\n\tQRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {\r\n\t\t\r\n\t\tvar rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\r\n\t\t\r\n\t\tvar buffer = new QRBitBuffer();\r\n\t\t\r\n\t\tfor (var i = 0; i < dataList.length; i++) {\r\n\t\t\tvar data = dataList[i];\r\n\t\t\tbuffer.put(data.mode, 4);\r\n\t\t\tbuffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );\r\n\t\t\tdata.write(buffer);\r\n\t\t}\r\n\r\n\t\t// calc num max data.\r\n\t\tvar totalDataCount = 0;\r\n\t\tfor (var i = 0; i < rsBlocks.length; i++) {\r\n\t\t\ttotalDataCount += rsBlocks[i].dataCount;\r\n\t\t}\r\n\r\n\t\tif (buffer.getLengthInBits() > totalDataCount * 8) {\r\n\t\t\tthrow new Error(\"code length overflow. (\"\r\n\t\t\t\t+ buffer.getLengthInBits()\r\n\t\t\t\t+ \">\"\r\n\t\t\t\t+  totalDataCount * 8\r\n\t\t\t\t+ \")\");\r\n\t\t}\r\n\r\n\t\t// end code\r\n\t\tif (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\r\n\t\t\tbuffer.put(0, 4);\r\n\t\t}\r\n\r\n\t\t// padding\r\n\t\twhile (buffer.getLengthInBits() % 8 != 0) {\r\n\t\t\tbuffer.putBit(false);\r\n\t\t}\r\n\r\n\t\t// padding\r\n\t\twhile (true) {\r\n\t\t\t\r\n\t\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbuffer.put(QRCode.PAD0, 8);\r\n\t\t\t\r\n\t\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbuffer.put(QRCode.PAD1, 8);\r\n\t\t}\r\n\r\n\t\treturn QRCode.createBytes(buffer, rsBlocks);\r\n\t}\r\n\r\n\tQRCode.createBytes = function(buffer, rsBlocks) {\r\n\r\n\t\tvar offset = 0;\r\n\t\t\r\n\t\tvar maxDcCount = 0;\r\n\t\tvar maxEcCount = 0;\r\n\t\t\r\n\t\tvar dcdata = new Array(rsBlocks.length);\r\n\t\tvar ecdata = new Array(rsBlocks.length);\r\n\t\t\r\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\r\n\r\n\t\t\tvar dcCount = rsBlocks[r].dataCount;\r\n\t\t\tvar ecCount = rsBlocks[r].totalCount - dcCount;\r\n\r\n\t\t\tmaxDcCount = Math.max(maxDcCount, dcCount);\r\n\t\t\tmaxEcCount = Math.max(maxEcCount, ecCount);\r\n\t\t\t\r\n\t\t\tdcdata[r] = new Array(dcCount);\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < dcdata[r].length; i++) {\r\n\t\t\t\tdcdata[r][i] = 0xff & buffer.buffer[i + offset];\r\n\t\t\t}\r\n\t\t\toffset += dcCount;\r\n\t\t\t\r\n\t\t\tvar rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\r\n\t\t\tvar rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\r\n\r\n\t\t\tvar modPoly = rawPoly.mod(rsPoly);\r\n\t\t\tecdata[r] = new Array(rsPoly.getLength() - 1);\r\n\t\t\tfor (var i = 0; i < ecdata[r].length; i++) {\r\n\t            var modIndex = i + modPoly.getLength() - ecdata[r].length;\r\n\t\t\t\tecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t\r\n\t\tvar totalCodeCount = 0;\r\n\t\tfor (var i = 0; i < rsBlocks.length; i++) {\r\n\t\t\ttotalCodeCount += rsBlocks[i].totalCount;\r\n\t\t}\r\n\r\n\t\tvar data = new Array(totalCodeCount);\r\n\t\tvar index = 0;\r\n\r\n\t\tfor (var i = 0; i < maxDcCount; i++) {\r\n\t\t\tfor (var r = 0; r < rsBlocks.length; r++) {\r\n\t\t\t\tif (i < dcdata[r].length) {\r\n\t\t\t\t\tdata[index++] = dcdata[r][i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < maxEcCount; i++) {\r\n\t\t\tfor (var r = 0; r < rsBlocks.length; r++) {\r\n\t\t\t\tif (i < ecdata[r].length) {\r\n\t\t\t\t\tdata[index++] = ecdata[r][i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\treturn QRCode;\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}