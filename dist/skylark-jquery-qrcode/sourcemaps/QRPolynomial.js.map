{"version":3,"sources":["QRPolynomial.js"],"names":["define","QRMath","QRPolynomial","num","shift","undefined","length","Error","offset","this","Array","i","prototype","get","index","getLength","multiply","e","j","gexp","glog","mod","ratio"],"mappings":";;;;;;;AAAAA,QACC,YACC,SAASC,GAKV,SAASC,EAAaC,EAAKC,GAE1B,QAAkBC,GAAdF,EAAIG,OACP,MAAM,IAAIC,MAAMJ,EAAIG,OAAS,IAAMF,GAKpC,IAFA,IAAII,EAAS,EAENA,EAASL,EAAIG,QAAyB,GAAfH,EAAIK,IACjCA,IAGDC,KAAKN,IAAM,IAAIO,MAAMP,EAAIG,OAASE,EAASJ,GAC3C,IAAK,IAAIO,EAAI,EAAGA,EAAIR,EAAIG,OAASE,EAAQG,IACxCF,KAAKN,IAAIQ,GAAKR,EAAIQ,EAAIH,GAkDxB,OA9CAN,EAAaU,WAEZC,IAAM,SAASC,GACd,OAAOL,KAAKN,IAAIW,IAGjBC,UAAY,WACX,OAAON,KAAKN,IAAIG,QAGjBU,SAAW,SAASC,GAInB,IAFA,IAAId,EAAM,IAAIO,MAAMD,KAAKM,YAAcE,EAAEF,YAAc,GAE9CJ,EAAI,EAAGA,EAAIF,KAAKM,YAAaJ,IACrC,IAAK,IAAIO,EAAI,EAAGA,EAAID,EAAEF,YAAaG,IAClCf,EAAIQ,EAAIO,IAAMjB,EAAOkB,KAAKlB,EAAOmB,KAAKX,KAAKI,IAAIF,IAAOV,EAAOmB,KAAKH,EAAEJ,IAAIK,KAI1E,OAAO,IAAIhB,EAAaC,EAAK,IAG9BkB,IAAM,SAASJ,GAEd,GAAIR,KAAKM,YAAcE,EAAEF,YAAc,EACtC,OAAON,KAOR,IAJA,IAAIa,EAAQrB,EAAOmB,KAAKX,KAAKI,IAAI,IAAOZ,EAAOmB,KAAKH,EAAEJ,IAAI,IAEtDV,EAAM,IAAIO,MAAMD,KAAKM,aAEhBJ,EAAI,EAAGA,EAAIF,KAAKM,YAAaJ,IACrCR,EAAIQ,GAAKF,KAAKI,IAAIF,GAGnB,IAASA,EAAI,EAAGA,EAAIM,EAAEF,YAAaJ,IAClCR,EAAIQ,IAAMV,EAAOkB,KAAKlB,EAAOmB,KAAKH,EAAEJ,IAAIF,IAAOW,GAIhD,OAAO,IAAIpB,EAAaC,EAAK,GAAGkB,IAAIJ,KAI/Bf","file":"../QRPolynomial.js","sourcesContent":["define([\r\n\t\"./QRMath\"\r\n],function(QRMath){\r\n\t//---------------------------------------------------------------------\r\n\t// QRPolynomial\r\n\t//---------------------------------------------------------------------\r\n\r\n\tfunction QRPolynomial(num, shift) {\r\n\r\n\t\tif (num.length == undefined) {\r\n\t\t\tthrow new Error(num.length + \"/\" + shift);\r\n\t\t}\r\n\r\n\t\tvar offset = 0;\r\n\r\n\t\twhile (offset < num.length && num[offset] == 0) {\r\n\t\t\toffset++;\r\n\t\t}\r\n\r\n\t\tthis.num = new Array(num.length - offset + shift);\r\n\t\tfor (var i = 0; i < num.length - offset; i++) {\r\n\t\t\tthis.num[i] = num[i + offset];\r\n\t\t}\r\n\t}\r\n\r\n\tQRPolynomial.prototype = {\r\n\r\n\t\tget : function(index) {\r\n\t\t\treturn this.num[index];\r\n\t\t},\r\n\t\t\r\n\t\tgetLength : function() {\r\n\t\t\treturn this.num.length;\r\n\t\t},\r\n\t\t\r\n\t\tmultiply : function(e) {\r\n\t\t\r\n\t\t\tvar num = new Array(this.getLength() + e.getLength() - 1);\r\n\t\t\r\n\t\t\tfor (var i = 0; i < this.getLength(); i++) {\r\n\t\t\t\tfor (var j = 0; j < e.getLength(); j++) {\r\n\t\t\t\t\tnum[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i) ) + QRMath.glog(e.get(j) ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\treturn new QRPolynomial(num, 0);\r\n\t\t},\r\n\t\t\r\n\t\tmod : function(e) {\r\n\t\t\r\n\t\t\tif (this.getLength() - e.getLength() < 0) {\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar ratio = QRMath.glog(this.get(0) ) - QRMath.glog(e.get(0) );\r\n\t\t\r\n\t\t\tvar num = new Array(this.getLength() );\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.getLength(); i++) {\r\n\t\t\t\tnum[i] = this.get(i);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < e.getLength(); i++) {\r\n\t\t\t\tnum[i] ^= QRMath.gexp(QRMath.glog(e.get(i) ) + ratio);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t// recursive call\r\n\t\t\treturn new QRPolynomial(num, 0).mod(e);\r\n\t\t}\r\n\t};\r\n\r\n\treturn QRPolynomial;\r\n});"]}